/*
 * Merchant Identifier API
 * Retrieve merchant data for a given merchant descriptor
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.api.merchantidentifier.client;

import com.mastercard.api.merchantidentifier.ApiCallback;
import com.mastercard.api.merchantidentifier.ApiClient;
import com.mastercard.api.merchantidentifier.ApiException;
import com.mastercard.api.merchantidentifier.ApiResponse;
import com.mastercard.api.merchantidentifier.Configuration;
import com.mastercard.api.merchantidentifier.Pair;
import com.mastercard.api.merchantidentifier.ProgressRequestBody;
import com.mastercard.api.merchantidentifier.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.api.merchantidentifier.model.ErrorResponse;
import com.mastercard.api.merchantidentifier.model.MerchantByCardAcceptorIdList;
import com.mastercard.api.merchantidentifier.model.MerchantByTaxIdList;
import com.mastercard.api.merchantidentifier.model.MerchantList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MerchantsApi {
    private ApiClient localVarApiClient;

    public MerchantsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getMerchantByCardAcceptorId
     * @param cardAcceptorId Card Acceptor Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information for this merchant identifier </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantByCardAcceptorIdCall(String cardAcceptorId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchants-by-card-acceptor-ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cardAcceptorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_acceptor_id", cardAcceptorId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantByCardAcceptorIdValidateBeforeCall(String cardAcceptorId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cardAcceptorId' is set
        if (cardAcceptorId == null) {
            throw new ApiException("Missing the required parameter 'cardAcceptorId' when calling getMerchantByCardAcceptorId(Async)");
        }
        

        okhttp3.Call localVarCall = getMerchantByCardAcceptorIdCall(cardAcceptorId, _callback);
        return localVarCall;

    }

    /**
     * Get matched merchant information for a given card acceptor id
     * Returns merchant details for matched merchants given a card acceptor id.  (IMPORTANT - Only card acceptor ids that can be uniquely mapped to one merchant location are accepted)
     * @param cardAcceptorId Card Acceptor Id (required)
     * @return MerchantByCardAcceptorIdList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information for this merchant identifier </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public MerchantByCardAcceptorIdList getMerchantByCardAcceptorId(String cardAcceptorId) throws ApiException {
        ApiResponse<MerchantByCardAcceptorIdList> localVarResp = getMerchantByCardAcceptorIdWithHttpInfo(cardAcceptorId);
        return localVarResp.getData();
    }

    /**
     * Get matched merchant information for a given card acceptor id
     * Returns merchant details for matched merchants given a card acceptor id.  (IMPORTANT - Only card acceptor ids that can be uniquely mapped to one merchant location are accepted)
     * @param cardAcceptorId Card Acceptor Id (required)
     * @return ApiResponse&lt;MerchantByCardAcceptorIdList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information for this merchant identifier </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantByCardAcceptorIdList> getMerchantByCardAcceptorIdWithHttpInfo(String cardAcceptorId) throws ApiException {
        okhttp3.Call localVarCall = getMerchantByCardAcceptorIdValidateBeforeCall(cardAcceptorId, null);
        Type localVarReturnType = new TypeToken<MerchantByCardAcceptorIdList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get matched merchant information for a given card acceptor id (asynchronously)
     * Returns merchant details for matched merchants given a card acceptor id.  (IMPORTANT - Only card acceptor ids that can be uniquely mapped to one merchant location are accepted)
     * @param cardAcceptorId Card Acceptor Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information for this merchant identifier </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantByCardAcceptorIdAsync(String cardAcceptorId, final ApiCallback<MerchantByCardAcceptorIdList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantByCardAcceptorIdValidateBeforeCall(cardAcceptorId, _callback);
        Type localVarReturnType = new TypeToken<MerchantByCardAcceptorIdList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantByTaxId
     * @param taxId The tax id assigned by government entity for location (required)
     * @param countryCode ISO 3166-1 alpha-3 country code of tax id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information for this merchant identifier </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantByTaxIdCall(String taxId, String countryCode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchants-by-tax-ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (taxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tax_id", taxId));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_code", countryCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantByTaxIdValidateBeforeCall(String taxId, String countryCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taxId' is set
        if (taxId == null) {
            throw new ApiException("Missing the required parameter 'taxId' when calling getMerchantByTaxId(Async)");
        }
        
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling getMerchantByTaxId(Async)");
        }
        

        okhttp3.Call localVarCall = getMerchantByTaxIdCall(taxId, countryCode, _callback);
        return localVarCall;

    }

    /**
     * Get merchant information for a given tax id
     * Returns a list merchants details for matched merchant given a tax id
     * @param taxId The tax id assigned by government entity for location (required)
     * @param countryCode ISO 3166-1 alpha-3 country code of tax id (required)
     * @return MerchantByTaxIdList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information for this merchant identifier </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public MerchantByTaxIdList getMerchantByTaxId(String taxId, String countryCode) throws ApiException {
        ApiResponse<MerchantByTaxIdList> localVarResp = getMerchantByTaxIdWithHttpInfo(taxId, countryCode);
        return localVarResp.getData();
    }

    /**
     * Get merchant information for a given tax id
     * Returns a list merchants details for matched merchant given a tax id
     * @param taxId The tax id assigned by government entity for location (required)
     * @param countryCode ISO 3166-1 alpha-3 country code of tax id (required)
     * @return ApiResponse&lt;MerchantByTaxIdList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information for this merchant identifier </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantByTaxIdList> getMerchantByTaxIdWithHttpInfo(String taxId, String countryCode) throws ApiException {
        okhttp3.Call localVarCall = getMerchantByTaxIdValidateBeforeCall(taxId, countryCode, null);
        Type localVarReturnType = new TypeToken<MerchantByTaxIdList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get merchant information for a given tax id (asynchronously)
     * Returns a list merchants details for matched merchant given a tax id
     * @param taxId The tax id assigned by government entity for location (required)
     * @param countryCode ISO 3166-1 alpha-3 country code of tax id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information for this merchant identifier </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantByTaxIdAsync(String taxId, String countryCode, final ApiCallback<MerchantByTaxIdList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantByTaxIdValidateBeforeCall(taxId, countryCode, _callback);
        Type localVarReturnType = new TypeToken<MerchantByTaxIdList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchants
     * @param merchantDescriptor Merchant Descriptor (required)
     * @param matchType The type of match to perform (optional, default to ExactMatch)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information for this merchant identifier </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantsCall(String merchantDescriptor, String matchType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (merchantDescriptor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchant_descriptor", merchantDescriptor));
        }

        if (matchType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("match_type", matchType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantsValidateBeforeCall(String merchantDescriptor, String matchType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'merchantDescriptor' is set
        if (merchantDescriptor == null) {
            throw new ApiException("Missing the required parameter 'merchantDescriptor' when calling getMerchants(Async)");
        }
        

        okhttp3.Call localVarCall = getMerchantsCall(merchantDescriptor, matchType, _callback);
        return localVarCall;

    }

    /**
     * Get matched merchants for a given merchant descriptor
     * Returns merchant details for matched merchants given a merchant descriptor as input. (IMPORTANT - Please remove all spaces from the merchant descriptor before submitting your API request)
     * @param merchantDescriptor Merchant Descriptor (required)
     * @param matchType The type of match to perform (optional, default to ExactMatch)
     * @return MerchantList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information for this merchant identifier </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public MerchantList getMerchants(String merchantDescriptor, String matchType) throws ApiException {
        ApiResponse<MerchantList> localVarResp = getMerchantsWithHttpInfo(merchantDescriptor, matchType);
        return localVarResp.getData();
    }

    /**
     * Get matched merchants for a given merchant descriptor
     * Returns merchant details for matched merchants given a merchant descriptor as input. (IMPORTANT - Please remove all spaces from the merchant descriptor before submitting your API request)
     * @param merchantDescriptor Merchant Descriptor (required)
     * @param matchType The type of match to perform (optional, default to ExactMatch)
     * @return ApiResponse&lt;MerchantList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information for this merchant identifier </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantList> getMerchantsWithHttpInfo(String merchantDescriptor, String matchType) throws ApiException {
        okhttp3.Call localVarCall = getMerchantsValidateBeforeCall(merchantDescriptor, matchType, null);
        Type localVarReturnType = new TypeToken<MerchantList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get matched merchants for a given merchant descriptor (asynchronously)
     * Returns merchant details for matched merchants given a merchant descriptor as input. (IMPORTANT - Please remove all spaces from the merchant descriptor before submitting your API request)
     * @param merchantDescriptor Merchant Descriptor (required)
     * @param matchType The type of match to perform (optional, default to ExactMatch)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information for this merchant identifier </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantsAsync(String merchantDescriptor, String matchType, final ApiCallback<MerchantList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantsValidateBeforeCall(merchantDescriptor, matchType, _callback);
        Type localVarReturnType = new TypeToken<MerchantList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
